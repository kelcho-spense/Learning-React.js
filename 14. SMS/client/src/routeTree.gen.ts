/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as WriteRouteImport } from './routes/write'
import { Route as LoginRouteImport } from './routes/login'
import { Route as FeaturesRouteImport } from './routes/features'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as ContactRouteImport } from './routes/contact'
import { Route as CategoriesRouteImport } from './routes/categories'
import { Route as BlogsRouteImport } from './routes/blogs'
import { Route as AboutRouteImport } from './routes/about'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DashboardIndexRouteImport } from './routes/dashboard/index'
import { Route as DashboardUsersRouteImport } from './routes/dashboard/users'
import { Route as DashboardNewBlogRouteImport } from './routes/dashboard/new-blog'
import { Route as DashboardMeRouteImport } from './routes/dashboard/me'
import { Route as DashboardDraftsRouteImport } from './routes/dashboard/drafts'
import { Route as DashboardCategoriesRouteImport } from './routes/dashboard/categories'
import { Route as DashboardBlogsRouteImport } from './routes/dashboard/blogs'
import { Route as DashboardAdminDashboardRouteImport } from './routes/dashboard/admin-dashboard'
import { Route as DashboardAdminAccountsRouteImport } from './routes/dashboard/admin-accounts'
import { Route as BlogPostIdRouteImport } from './routes/blog.$postId'

const WriteRoute = WriteRouteImport.update({
  id: '/write',
  path: '/write',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const FeaturesRoute = FeaturesRouteImport.update({
  id: '/features',
  path: '/features',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const ContactRoute = ContactRouteImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRouteImport,
} as any)
const CategoriesRoute = CategoriesRouteImport.update({
  id: '/categories',
  path: '/categories',
  getParentRoute: () => rootRouteImport,
} as any)
const BlogsRoute = BlogsRouteImport.update({
  id: '/blogs',
  path: '/blogs',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardIndexRoute = DashboardIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardUsersRoute = DashboardUsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardNewBlogRoute = DashboardNewBlogRouteImport.update({
  id: '/new-blog',
  path: '/new-blog',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardMeRoute = DashboardMeRouteImport.update({
  id: '/me',
  path: '/me',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardDraftsRoute = DashboardDraftsRouteImport.update({
  id: '/drafts',
  path: '/drafts',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardCategoriesRoute = DashboardCategoriesRouteImport.update({
  id: '/categories',
  path: '/categories',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardBlogsRoute = DashboardBlogsRouteImport.update({
  id: '/blogs',
  path: '/blogs',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardAdminDashboardRoute = DashboardAdminDashboardRouteImport.update({
  id: '/admin-dashboard',
  path: '/admin-dashboard',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardAdminAccountsRoute = DashboardAdminAccountsRouteImport.update({
  id: '/admin-accounts',
  path: '/admin-accounts',
  getParentRoute: () => DashboardRoute,
} as any)
const BlogPostIdRoute = BlogPostIdRouteImport.update({
  id: '/blog/$postId',
  path: '/blog/$postId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/blogs': typeof BlogsRoute
  '/categories': typeof CategoriesRoute
  '/contact': typeof ContactRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/features': typeof FeaturesRoute
  '/login': typeof LoginRoute
  '/write': typeof WriteRoute
  '/blog/$postId': typeof BlogPostIdRoute
  '/dashboard/admin-accounts': typeof DashboardAdminAccountsRoute
  '/dashboard/admin-dashboard': typeof DashboardAdminDashboardRoute
  '/dashboard/blogs': typeof DashboardBlogsRoute
  '/dashboard/categories': typeof DashboardCategoriesRoute
  '/dashboard/drafts': typeof DashboardDraftsRoute
  '/dashboard/me': typeof DashboardMeRoute
  '/dashboard/new-blog': typeof DashboardNewBlogRoute
  '/dashboard/users': typeof DashboardUsersRoute
  '/dashboard/': typeof DashboardIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/blogs': typeof BlogsRoute
  '/categories': typeof CategoriesRoute
  '/contact': typeof ContactRoute
  '/features': typeof FeaturesRoute
  '/login': typeof LoginRoute
  '/write': typeof WriteRoute
  '/blog/$postId': typeof BlogPostIdRoute
  '/dashboard/admin-accounts': typeof DashboardAdminAccountsRoute
  '/dashboard/admin-dashboard': typeof DashboardAdminDashboardRoute
  '/dashboard/blogs': typeof DashboardBlogsRoute
  '/dashboard/categories': typeof DashboardCategoriesRoute
  '/dashboard/drafts': typeof DashboardDraftsRoute
  '/dashboard/me': typeof DashboardMeRoute
  '/dashboard/new-blog': typeof DashboardNewBlogRoute
  '/dashboard/users': typeof DashboardUsersRoute
  '/dashboard': typeof DashboardIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/blogs': typeof BlogsRoute
  '/categories': typeof CategoriesRoute
  '/contact': typeof ContactRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/features': typeof FeaturesRoute
  '/login': typeof LoginRoute
  '/write': typeof WriteRoute
  '/blog/$postId': typeof BlogPostIdRoute
  '/dashboard/admin-accounts': typeof DashboardAdminAccountsRoute
  '/dashboard/admin-dashboard': typeof DashboardAdminDashboardRoute
  '/dashboard/blogs': typeof DashboardBlogsRoute
  '/dashboard/categories': typeof DashboardCategoriesRoute
  '/dashboard/drafts': typeof DashboardDraftsRoute
  '/dashboard/me': typeof DashboardMeRoute
  '/dashboard/new-blog': typeof DashboardNewBlogRoute
  '/dashboard/users': typeof DashboardUsersRoute
  '/dashboard/': typeof DashboardIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/blogs'
    | '/categories'
    | '/contact'
    | '/dashboard'
    | '/features'
    | '/login'
    | '/write'
    | '/blog/$postId'
    | '/dashboard/admin-accounts'
    | '/dashboard/admin-dashboard'
    | '/dashboard/blogs'
    | '/dashboard/categories'
    | '/dashboard/drafts'
    | '/dashboard/me'
    | '/dashboard/new-blog'
    | '/dashboard/users'
    | '/dashboard/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/blogs'
    | '/categories'
    | '/contact'
    | '/features'
    | '/login'
    | '/write'
    | '/blog/$postId'
    | '/dashboard/admin-accounts'
    | '/dashboard/admin-dashboard'
    | '/dashboard/blogs'
    | '/dashboard/categories'
    | '/dashboard/drafts'
    | '/dashboard/me'
    | '/dashboard/new-blog'
    | '/dashboard/users'
    | '/dashboard'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/blogs'
    | '/categories'
    | '/contact'
    | '/dashboard'
    | '/features'
    | '/login'
    | '/write'
    | '/blog/$postId'
    | '/dashboard/admin-accounts'
    | '/dashboard/admin-dashboard'
    | '/dashboard/blogs'
    | '/dashboard/categories'
    | '/dashboard/drafts'
    | '/dashboard/me'
    | '/dashboard/new-blog'
    | '/dashboard/users'
    | '/dashboard/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  BlogsRoute: typeof BlogsRoute
  CategoriesRoute: typeof CategoriesRoute
  ContactRoute: typeof ContactRoute
  DashboardRoute: typeof DashboardRouteWithChildren
  FeaturesRoute: typeof FeaturesRoute
  LoginRoute: typeof LoginRoute
  WriteRoute: typeof WriteRoute
  BlogPostIdRoute: typeof BlogPostIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/write': {
      id: '/write'
      path: '/write'
      fullPath: '/write'
      preLoaderRoute: typeof WriteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/features': {
      id: '/features'
      path: '/features'
      fullPath: '/features'
      preLoaderRoute: typeof FeaturesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/categories': {
      id: '/categories'
      path: '/categories'
      fullPath: '/categories'
      preLoaderRoute: typeof CategoriesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/blogs': {
      id: '/blogs'
      path: '/blogs'
      fullPath: '/blogs'
      preLoaderRoute: typeof BlogsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardIndexRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/users': {
      id: '/dashboard/users'
      path: '/users'
      fullPath: '/dashboard/users'
      preLoaderRoute: typeof DashboardUsersRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/new-blog': {
      id: '/dashboard/new-blog'
      path: '/new-blog'
      fullPath: '/dashboard/new-blog'
      preLoaderRoute: typeof DashboardNewBlogRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/me': {
      id: '/dashboard/me'
      path: '/me'
      fullPath: '/dashboard/me'
      preLoaderRoute: typeof DashboardMeRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/drafts': {
      id: '/dashboard/drafts'
      path: '/drafts'
      fullPath: '/dashboard/drafts'
      preLoaderRoute: typeof DashboardDraftsRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/categories': {
      id: '/dashboard/categories'
      path: '/categories'
      fullPath: '/dashboard/categories'
      preLoaderRoute: typeof DashboardCategoriesRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/blogs': {
      id: '/dashboard/blogs'
      path: '/blogs'
      fullPath: '/dashboard/blogs'
      preLoaderRoute: typeof DashboardBlogsRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/admin-dashboard': {
      id: '/dashboard/admin-dashboard'
      path: '/admin-dashboard'
      fullPath: '/dashboard/admin-dashboard'
      preLoaderRoute: typeof DashboardAdminDashboardRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/admin-accounts': {
      id: '/dashboard/admin-accounts'
      path: '/admin-accounts'
      fullPath: '/dashboard/admin-accounts'
      preLoaderRoute: typeof DashboardAdminAccountsRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/blog/$postId': {
      id: '/blog/$postId'
      path: '/blog/$postId'
      fullPath: '/blog/$postId'
      preLoaderRoute: typeof BlogPostIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface DashboardRouteChildren {
  DashboardAdminAccountsRoute: typeof DashboardAdminAccountsRoute
  DashboardAdminDashboardRoute: typeof DashboardAdminDashboardRoute
  DashboardBlogsRoute: typeof DashboardBlogsRoute
  DashboardCategoriesRoute: typeof DashboardCategoriesRoute
  DashboardDraftsRoute: typeof DashboardDraftsRoute
  DashboardMeRoute: typeof DashboardMeRoute
  DashboardNewBlogRoute: typeof DashboardNewBlogRoute
  DashboardUsersRoute: typeof DashboardUsersRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardAdminAccountsRoute: DashboardAdminAccountsRoute,
  DashboardAdminDashboardRoute: DashboardAdminDashboardRoute,
  DashboardBlogsRoute: DashboardBlogsRoute,
  DashboardCategoriesRoute: DashboardCategoriesRoute,
  DashboardDraftsRoute: DashboardDraftsRoute,
  DashboardMeRoute: DashboardMeRoute,
  DashboardNewBlogRoute: DashboardNewBlogRoute,
  DashboardUsersRoute: DashboardUsersRoute,
  DashboardIndexRoute: DashboardIndexRoute,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  BlogsRoute: BlogsRoute,
  CategoriesRoute: CategoriesRoute,
  ContactRoute: ContactRoute,
  DashboardRoute: DashboardRouteWithChildren,
  FeaturesRoute: FeaturesRoute,
  LoginRoute: LoginRoute,
  WriteRoute: WriteRoute,
  BlogPostIdRoute: BlogPostIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
